# 使用 cargo-chef 优化 Rust 构建缓存
FROM lukemathwalker/cargo-chef:latest-rust-1.75 AS chef
WORKDIR /app

# 计划阶段 - 准备构建缓存
FROM chef AS planner
COPY Cargo.toml Cargo.lock ./
COPY src ./src
RUN cargo chef prepare --recipe-path recipe.json

# 构建阶段 - Rust 后端
FROM chef AS rust-builder
COPY --from=planner /app/recipe.json recipe.json
# 构建依赖 - 这个层会被缓存
RUN cargo chef cook --release --recipe-path recipe.json
# 构建应用
COPY Cargo.toml Cargo.lock ./
COPY src ./src
RUN cargo build --release

# 构建阶段 - React 前端
FROM node:18-alpine as frontend-builder
WORKDIR /app/frontend
# 复制 package 文件并安装依赖
COPY frontend/package*.json ./
RUN npm ci --only=production
# 复制源代码并构建
COPY frontend/ .
RUN npm run build

# 最小化运行时镜像
FROM debian:bookworm-slim

# 安装运行时依赖
RUN apt-get update && apt-get install -y \
    ca-certificates \
    curl \
    net-tools \
    iproute2 \
    procps \
    lm-sensors \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# 创建非 root 用户
RUN groupadd -r indexrs && useradd -r -g indexrs indexrs

WORKDIR /app

# 从构建阶段复制文件
COPY --from=rust-builder /app/target/release/index-rs /app/index-rs
COPY --from=frontend-builder /app/static /app/static
COPY config.example.toml /app/config.toml

# 设置权限
RUN chown -R indexrs:indexrs /app

USER indexrs

# 暴露端口
EXPOSE 9876

# 健康检查
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
    CMD curl -f http://localhost:9876/api/system/static || exit 1

# 设置环境变量
ENV RUST_LOG=info

# 启动应用
ENTRYPOINT ["/app/index-rs"]